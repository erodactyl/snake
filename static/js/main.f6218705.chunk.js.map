{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["IDirection","equal","sq1","sq2","x","y","includesSquare","snake","square","some","el","Square","occupied","treat","style","height","width","border","backgroundColor","App","useState","Right","direction","setDirection","setSnake","setTreat","speedDivider","setSpeedDivider","isDead","setIsDead","boardRef","useRef","useEffect","window","onkeydown","event","newDirection","keyCode","Down","Up","Left","getDirectionFromKeyCode","setTimeout","move","current","Array","fill","map","_","row","col","getNewTreat","arrays","arr","withoutSnake","concat","apply","filter","Math","floor","random","length","boardSize","lastCell","nextSquare","isCapture","newSnake","slice","display","gridTemplateColumns","sq","key","flexDirection","alignItems","onClick","s","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6218705.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nconst BOARD_SIZE = 20;\nconst CELL_SIZE = 25;\nconst BORDER = 1;\nconst BASE_SPEED = 1000;\n\ninterface ISquare {\n  x: number;\n  y: number;\n}\n\nenum IDirection {\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nfunction getDirectionFromKeyCode(keyCode: number): IDirection | null {\n  switch (keyCode) {\n    case 40:\n      return IDirection.Down;\n    case 38:\n      return IDirection.Up;\n    case 37:\n      return IDirection.Left;\n    case 39:\n      return IDirection.Right;\n    default:\n      return null;\n  }\n}\n\nfunction random<T>(arr: T[]) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction flatten<T>(arrays: T[][]) {\n  const flat: T[] = [];\n  return flat.concat.apply([], arrays);\n}\n\nconst equal = (sq1: ISquare, sq2: ISquare) =>\n  sq1.x === sq2.x && sq1.y === sq2.y;\n\nfunction includesSquare(snake: ISquare[], square: ISquare) {\n  return snake.some((el) => equal(el, square));\n}\n\nfunction last<T>(arr: T[]) {\n  return arr[arr.length - 1];\n}\n\nconst nextSquare = (\n  snake: ISquare[],\n  direction: IDirection,\n  boardSize: number\n): ISquare => {\n  const lastCell = last(snake);\n  switch (direction) {\n    case IDirection.Down:\n      return {\n        x: lastCell.x + 1 === boardSize ? 0 : lastCell.x + 1,\n        y: lastCell.y,\n      };\n    case IDirection.Up:\n      return {\n        x: lastCell.x - 1 < 0 ? boardSize - 1 : lastCell.x - 1,\n        y: lastCell.y,\n      };\n    case IDirection.Left:\n      return {\n        x: lastCell.x,\n        y: lastCell.y - 1 < 0 ? boardSize - 1 : lastCell.y - 1,\n      };\n    case IDirection.Right:\n      return {\n        x: lastCell.x,\n        y: lastCell.y + 1 === boardSize ? 0 : lastCell.y + 1,\n      };\n  }\n};\n\nfunction Square({ occupied, treat }: { occupied: boolean; treat: boolean }) {\n  return (\n    <div\n      style={{\n        height: CELL_SIZE,\n        width: CELL_SIZE,\n        border: `${BORDER}px solid black`,\n        backgroundColor: occupied ? \"black\" : treat ? \"red\" : \"white\",\n      }}\n    />\n  );\n}\n\nfunction App() {\n  const [direction, setDirection] = useState<IDirection>(IDirection.Right);\n  const [snake, setSnake] = useState<ISquare[]>([{ x: 0, y: 5 }]);\n  const [treat, setTreat] = useState<ISquare>({ x: 0, y: 10 });\n  const [speedDivider, setSpeedDivider] = useState(1);\n  const [isDead, setIsDead] = useState<boolean>(false);\n  const boardRef = useRef<ISquare[][] | null>(null);\n\n  const reset = () => {\n    setSnake([\n      {\n        x: Math.floor(Math.random() * BOARD_SIZE),\n        y: Math.floor(Math.random() * BOARD_SIZE),\n      },\n    ]);\n    setIsDead(false);\n    setTreat({\n      x: Math.floor(Math.random() * BOARD_SIZE),\n      y: Math.floor(Math.random() * BOARD_SIZE),\n    });\n  };\n\n  useEffect(() => {\n    window.onkeydown = (event: any) => {\n      const newDirection = getDirectionFromKeyCode(event.keyCode);\n      if (newDirection !== null) {\n        setDirection(newDirection);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const speed = BASE_SPEED / speedDivider;\n    setTimeout(move, speed);\n  }, [snake]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (boardRef.current === null) {\n    boardRef.current = Array(BOARD_SIZE)\n      .fill(null)\n      .map((_, row) =>\n        Array(BOARD_SIZE)\n          .fill(null)\n          .map((_, col) => ({ x: row, y: col }))\n      );\n  }\n\n  const getNewTreat = () => {\n    const full = flatten(boardRef.current!);\n    const withoutSnake = full.filter((el) => !includesSquare(snake, el));\n    const location = random(withoutSnake);\n    return location;\n  };\n\n  const move = () => {\n    const square = nextSquare(snake, direction, BOARD_SIZE);\n    if (includesSquare(snake, square)) {\n      setIsDead(true);\n    } else {\n      const isCapture = equal(square, treat);\n      if (isCapture) {\n        setTreat(getNewTreat);\n      }\n      const newSnake = isCapture\n        ? [...snake, square]\n        : [...snake.slice(1), square];\n      setSnake(newSnake);\n    }\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          width: (CELL_SIZE + BORDER) * BOARD_SIZE,\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(20, 1fr)\",\n        }}\n      >\n        {boardRef.current.map((row) =>\n          row.map((sq) => (\n            <Square\n              key={sq.x + sq.y}\n              occupied={includesSquare(snake, sq)}\n              treat={equal(sq, treat)}\n            />\n          ))\n        )}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          width: 200,\n          alignItems: \"center\",\n        }}\n      >\n        <button\n          style={{ height: CELL_SIZE, width: 200 }}\n          onClick={() => setSpeedDivider((s) => s + 1)}\n        >\n          Faster\n        </button>\n        {speedDivider}\n        <button\n          style={{ height: CELL_SIZE, width: 200 }}\n          onClick={() => setSpeedDivider((s) => s - 1)}\n        >\n          Slower\n        </button>\n      </div>\n      {isDead && (\n        <div>\n          You Died, <button onClick={reset}>reset</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}